--- python-gnupg-0.3.5-orig/gnupg.py	2013-08-30 13:10:36.000000000 -0400
+++ python-gnupg-0.3.5/gnupg.py	2013-12-31 16:31:11.044804846 -0500
@@ -994,16 +994,22 @@
         self._collect_output(p, result, stdin=p.stdin)
         return result
 
-    def export_keys(self, keyids, secret=False):
-        "export the indicated keys. 'keyid' is anything gpg accepts"
+    def export_keys(self, keyids, secret=False, minimal=False, armor=True):
+        "export the indicated keys. 'keyid' is anything gpg accepts. armor=, secret= and minimal= bools can be passed"
         which=''
+        eoptions=''
+        earmor=''
         if secret:
             which='-secret-key'
+        if minimal:
+            eoptions = "--export-options export-minimal"
+        if armor:
+                earmor='--armor'
         if _is_sequence(keyids):
             keyids = ' '.join([shell_quote(k) for k in keyids])
         else:
             keyids = shell_quote(keyids)
-        args = ['--armor --export%s %s' % (which, keyids)]
+        args = ['%s --export%s %s %s' % (earmor, which, eoptions, keyids)]
         p = self._open_subprocess(args)
         # gpg --export produces no status-fd output; stdout will be
         # empty in case of failure
@@ -1011,7 +1017,8 @@
         result = self.result_map['delete'](self) # any result will do
         self._collect_output(p, result, stdin=p.stdin)
         logger.debug('export_keys result: %r', result.data)
-        return result.data.decode(self.encoding, self.decode_errors)
+        #return result.data.decode(self.encoding, self.decode_errors)
+        return result.data
 
     def list_keys(self, secret=False):
         """ list the keys currently in the keyring
